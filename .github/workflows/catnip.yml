# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

name: Main Catnip
concurrency:
  group: catnip
  cancel-in-progress: false

on:
  workflow_dispatch:
  pull_request:
    types: [opened, synchronize]

env:
  LIBOS: catnip
  SERVER: ${{ secrets.CATNIP_HOSTNAME_A }}
  CLIENT: ${{ secrets.CATNIP_HOSTNAME_B }}
  SERVER_ADDR: 10.3.1.50
  CLIENT_ADDR: 10.3.1.51

jobs:

  debug-pipeline:
    name: Debug Pipeline
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup SSH
      shell: bash
      run: |
        mkdir -p $HOME/.ssh/
        echo "${{ secrets.SSHKEY }}" > "$HOME/.ssh/id_rsa"
        chmod 400 $HOME/.ssh/id_rsa
        echo "Host *" > $HOME/.ssh/config
        echo -e "\tStrictHostKeyChecking no" >> $HOME/.ssh/config
        echo -e "\tIdentityFile $HOME/.ssh/id_rsa" >> $HOME/.ssh/config
        echo -e "\tIdentitiesOnly yes" >> $HOME/.ssh/config
        echo -e "\tPasswordAuthentication no" >> $HOME/.ssh/config
        echo -e "\tUser ${{ secrets.USERNAME }}" >> $HOME/.ssh/config
        echo -e "\tPort ${{ secrets.PORTNUM }}" >> $HOME/.ssh/config
    - name: Run
      run: |
        pip install --pre azure-data-tables
        python3 tools/demikernel_ci.py \
          --server $SERVER \
          --client $CLIENT \
          --repository demikernel \
          --branch origin/${{ github.head_ref }} \
          --debug \
          --libos $LIBOS \
          --test-unit --test-system all --delay 2 \
          --server-addr $SERVER_ADDR \
          --client-addr $CLIENT_ADDR
    - name: Archive Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: debug-pipeline-logs
        path: |
          **/*.stdout.txt
          **/*.stderr.txt

  release-pipeline:
    name: Release Pipeline
    needs: debug-pipeline
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Setup SSH
      shell: bash
      run: |
        mkdir -p $HOME/.ssh/
        echo "${{ secrets.SSHKEY }}" > "$HOME/.ssh/id_rsa"
        chmod 400 $HOME/.ssh/id_rsa
        echo "Host *" > $HOME/.ssh/config
        echo -e "\tStrictHostKeyChecking no" >> $HOME/.ssh/config
        echo -e "\tIdentityFile $HOME/.ssh/id_rsa" >> $HOME/.ssh/config
        echo -e "\tIdentitiesOnly yes" >> $HOME/.ssh/config
        echo -e "\tPasswordAuthentication no" >> $HOME/.ssh/config
        echo -e "\tUser ${{ secrets.USERNAME }}" >> $HOME/.ssh/config
        echo -e "\tPort ${{ secrets.PORTNUM }}" >> $HOME/.ssh/config
    - name: Run
      run: |
        pip install --pre azure-data-tables
        python3 tools/demikernel_ci.py \
          --server $SERVER \
          --client $CLIENT \
          --repository demikernel \
          --branch origin/${{ github.head_ref }} \
          --libos $LIBOS \
          --test-unit --test-system all --delay 2 \
          --server-addr $SERVER_ADDR \
          --client-addr $CLIENT_ADDR \
          --connection-string "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
          --table-name ${{ secrets.AZURE_STORAGE_TABLE_NAME }}
    - name: Archive Logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: release-pipeline-logs
        path: |
          **/*.stdout.txt
          **/*.stderr.txt

  report-performance:
    name: Report performance
    needs: release-pipeline
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      deployments: read
      packages: none
      pull-requests: write
      security-events: write
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Parse Statistics
      id: parse-stats
      run: |
        git show --format=%H -s HEAD
        git rev-list --max-parents=0 HEAD
        pip install --pre azure-data-tables azure-storage-blob pandas matplotlib tabulate
        stats=$(python3 tools/plot.py \
          --connection "${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}" \
          --table  ${{ secrets.AZURE_STORAGE_TABLE_NAME }} \
          --key ${{ secrets.AZURE_STORAGE_KEY }} \
          --container ${{ secrets.AZURE_STORAGE_CONTAINER }} \
          --no-plot --libos $LIBOS)
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "MESSAGE<<$EOF" >> $GITHUB_OUTPUT
        echo "$stats" >> $GITHUB_OUTPUT
        echo "$EOF" >> $GITHUB_OUTPUT
    - name: Post Comment
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const message = `${{ steps.parse-stats.outputs.MESSAGE }}`
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: message
          })
