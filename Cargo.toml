# Copyright (c) Microsoft Corporation.
# Licensed under the MIT license.

#=======================================================================================================================
# Package
#=======================================================================================================================

[package]
name = "demikernel"
version = "1.4.1"
authors = ["Microsoft Corporation"]
edition = "2021"
description = "Kernel-Bypass LibOS Architecture"
readme = "README.md"
homepage = "https://aka.ms/demikernel"
repository = "https://github.com/demikernel/demikernel"
license-file = "LICENSE.txt"

#=======================================================================================================================
# Dependencies
#=======================================================================================================================

[dependencies]

# Third Party
arrayvec = "0.7.4"
async-trait = "0.1.74"
anyhow = "1.0.75"
bit-iter = "1.2.0"
cfg-if = "1.0.0"
crc = "3.0.1"
clap = "4.4.8"
crossbeam-channel = "0.5.8"
eui48 = "1.1.0"
flexi_logger = "0.27.3"
futures = "0.3.29"
libc = "0.2.150"
log = "0.4.20"
rand = { version = "0.8.5", features = ["small_rng"] }
slab = "0.4.9"
socket2 = "0.5.5"
yaml-rust = "0.4.5"
x86 = "0.52.0"

# Demikernel Organization
liburing = { git = "https://github.com/demikernel/liburing-rs", rev = "780827ee3f805d94f9909bd47cd925ee8476a64b", optional = true }
dpdk-rs = { git = "https://github.com/demikernel/dpdk-rs", rev = "a0bb97920560e978ce0991d6e0c3267fd8f0baa2", optional = true }

# Windows-specific dependencies.
[target.'cfg(windows)'.dependencies]
# libc implementation in Rust is quite different for Windows and Linux. This library provides the relevant networking
# constants and data structures for Windows.
windows = { version = "0.51.1", features = [
    "Win32_Foundation",
    "Win32_Networking_WinSock",
    "Win32_Security",
    "Win32_System_IO",
    "Win32_System_Threading",
] }
# for interacting with socket2.
windows-sys = { version = "0.48.0", features = ["Win32_Networking_WinSock"] }

#=======================================================================================================================
# Targets
#=======================================================================================================================

[lib]
crate-type = ["cdylib", "rlib"]
path = "src/rust/lib.rs"

[[test]]
name = "tcp-test"
path = "tests/rust/tcp-test/main.rs"
harness = false

[[test]]
name = "pipe-test"
path = "tests/rust/pipe-test/main.rs"
harness = false

[[test]]
name = "tcp"
path = "tests/rust/tcp.rs"

[[test]]
name = "udp"
path = "tests/rust/udp.rs"

[[test]]
name = "sga"
path = "tests/rust/sga.rs"

[[example]]
name = "udp-dump"
path = "examples/rust/udp-dump.rs"

[[example]]
name = "udp-echo"
path = "examples/rust/udp-echo.rs"

[[example]]
name = "udp-pktgen"
path = "examples/rust/udp-pktgen.rs"

[[example]]
name = "udp-relay"
path = "examples/rust/udp-relay.rs"

[[example]]
name = "pipe-ping-pong"
path = "examples/rust/pipe-ping-pong.rs"

[[example]]
name = "pipe-push-pop"
path = "examples/rust/pipe-push-pop.rs"

[[example]]
name = "udp-push-pop"
path = "examples/rust/udp-push-pop.rs"

[[example]]
name = "udp-ping-pong"
path = "examples/rust/udp-ping-pong.rs"

[[example]]
name = "tcp-dump"
path = "examples/rust/tcp-dump.rs"

[[example]]
name = "tcp-pktgen"
path = "examples/rust/tcp-pktgen.rs"

[[example]]
name = "tcp-push-pop"
path = "examples/rust/tcp-push-pop.rs"

[[example]]
name = "tcp-ping-pong"
path = "examples/rust/tcp-ping-pong.rs"

#=======================================================================================================================
# Features
#=======================================================================================================================

[features]
default = ["catnap-libos"]
catnap-libos = []
catpowder-libos = []
catcollar-libos = ["liburing"]
catmem-libos = []
catnip-libos = ["libdpdk"]
catloop-libos = ["catmem-libos"]
libdpdk = ["dpdk-rs"]
mlx4 = ["dpdk-rs/mlx4"]
mlx5 = ["dpdk-rs/mlx5"]
profiler = []

#=======================================================================================================================
# Profile
#=======================================================================================================================

# Build profile used for releases.
[profile.release]
opt-level = 3            # Enable all compiler optimizations.
debug = false            # Do not include any debug info in the binary.
debug-assertions = false # Do not include any debug assertions in the binary.
overflow-checks = false  # Do not check for overflows at runtime.
lto = "fat"              # Perform link time optimizations across all dependencies (overridden).
panic = "abort"          # Terminate the process upon panic (overridden).
incremental = false      # Disable incremental compilation.
codegen-units = 1        # Produce a single code generation unit (overridden).
rpath = false            # Disable runtime search path.

# Build profile used for development and debugging.
[profile.dev]
opt-level = 0           # Disable all compiler optimizations.
debug = true            # Output full debug info in the binary.
debug-assertions = true # Include debug assertions in the binary.
overflow-checks = true  # Check for overflows at runtime.
lto = "off"             # Disable link time optimization (overridden).
panic = 'unwind'        # Unwind the stack upon panic.
incremental = true      # Incremental build.
codegen-units = 256     # Produce multiple code generation units.
rpath = false           # Disable runtime search path.
